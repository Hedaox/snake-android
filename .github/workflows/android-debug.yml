name: Build Snake (Debug)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/android-debug.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK packages
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Generate project files (Snake v1.1)
        run: |
          set -e
          mkdir -p app/src/main/java/com/example/snake
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values

          # ---- Gradle settings (root) ----
          cat > settings.gradle <<'EOF'
          pluginManagement {
            repositories { gradlePluginPortal(); google(); mavenCentral() }
          }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories { google(); mavenCentral() }
          }
          rootProject.name = "Snake"
          include(":app")
          EOF

          cat > build.gradle <<'EOF'
          plugins { id 'com.android.application' version '8.5.0' apply false }
          EOF

          cat > gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          EOF

          # ---- App module ----
          cat > app/build.gradle <<'EOF'
          plugins { id 'com.android.application' }

          android {
            namespace 'com.example.snake'
            compileSdk 34
            defaultConfig {
              applicationId "com.example.snake"
              minSdk 21
              targetSdk 34
              versionCode 2
              versionName "1.1"
            }
            buildTypes {
              release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
              }
            }
          }

          // Exclude old Kotlin jdk7/8 variants to avoid duplicate class issues on CI
          configurations.all {
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
          }

          dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
          }
          EOF

          cat > app/proguard-rules.pro <<'EOF'
          # no rules
          EOF

          # ---- AndroidManifest (Menu is launcher) ----
          cat > app/src/main/AndroidManifest.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <application
              android:allowBackup="true"
              android:label="@string/app_name"
              android:supportsRtl="true"
              android:theme="@android:style/Theme.NoTitleBar.Fullscreen">

              <activity android:name=".SettingsActivity" android:exported="false" />
              <activity android:name=".MainActivity" android:exported="false" android:screenOrientation="portrait" />
              <activity android:name=".MenuActivity" android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          # ---- Strings ----
          cat > app/src/main/res/values/strings.xml <<'EOF'
          <resources>
            <string name="app_name">Snake</string>

            <!-- HUD -->
            <string name="score">Score</string>
            <string name="best">Best</string>
            <string name="tap_to_start">Tap to start</string>
            <string name="paused">Paused</string>
            <string name="game_over">Game over</string>
            <string name="slow_active">SLOW</string>
            <string name="shield_active">SHIELD</string>

            <!-- Menu -->
            <string name="play">Play</string>
            <string name="settings">Settings</string>
            <string name="exit">Exit</string>

            <!-- Settings -->
            <string name="title_settings">Settings</string>
            <string name="wrap">Wrap walls</string>
            <string name="haptics">Haptics</string>
            <string name="sound">Sound (placeholder)</string>
            <string name="speed">Speed</string>
            <string name="slow">Slow</string>
            <string name="normal">Normal</string>
            <string name="fast">Fast</string>
            <string name="back">Back</string>
          </resources>
          EOF

          # ---- Layouts ----
          cat > app/src/main/res/layout/activity_menu.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:gravity="center"
            android:orientation="vertical"
            android:background="#212121"
            android:padding="24dp">

            <Button
              android:id="@+id/btnPlay"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:text="@string/play"
              android:textAllCaps="false"
              android:layout_marginBottom="16dp"/>

            <Button
              android:id="@+id/btnSettings"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:text="@string/settings"
              android:textAllCaps="false"
              android:layout_marginBottom="16dp"/>

            <Button
              android:id="@+id/btnExit"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:text="@string/exit"
              android:textAllCaps="false"/>
          </LinearLayout>
          EOF

          cat > app/src/main/res/layout/activity_settings.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="#212121">
            <LinearLayout
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:orientation="vertical"
              android:padding="20dp">

              <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/title_settings"
                android:textSize="20sp"
                android:textColor="#FFFFFF"
                android:layout_marginBottom="12dp"/>

              <androidx.appcompat.widget.SwitchCompat
                android:id="@+id/switchWrap"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/wrap"
                android:textColor="#FFFFFF"
                android:layout_marginBottom="12dp"/>

              <androidx.appcompat.widget.SwitchCompat
                android:id="@+id/switchHaptics"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/haptics"
                android:textColor="#FFFFFF"
                android:layout_marginBottom="12dp"/>

              <androidx.appcompat.widget.SwitchCompat
                android:id="@+id/switchSound"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/sound"
                android:textColor="#AAAAAA"
                android:layout_marginBottom="16dp"/>

              <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/speed"
                android:textColor="#FFFFFF"/>

              <RadioGroup
                android:id="@+id/groupSpeed"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:layout_marginTop="8dp">

                <RadioButton
                  android:id="@+id/radioSlow"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/slow"
                  android:textColor="#FFFFFF"/>

                <RadioButton
                  android:id="@+id/radioNormal"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/normal"
                  android:textColor="#FFFFFF"
                  android:layout_marginStart="16dp"/>

                <RadioButton
                  android:id="@+id/radioFast"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/fast"
                  android:textColor="#FFFFFF"
                  android:layout_marginStart="16dp"/>
              </RadioGroup>
            </LinearLayout>
          </ScrollView>
          EOF

          cat > app/src/main/res/layout/activity_main.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent" android:layout_height="match_parent">
            <com.example.snake.GameView
              android:id="@+id/gameView"
              android:layout_width="match_parent"
              android:layout_height="match_parent"/>
          </FrameLayout>
          EOF

          # ---- Java sources ----
          cat > app/src/main/java/com/example/snake/MenuActivity.java <<'EOF'
          package com.example.snake;

          import android.content.Intent;
          import android.os.Bundle;
          import android.view.View;
          import android.widget.Button;
          import androidx.appcompat.app.AppCompatActivity;

          public class MenuActivity extends AppCompatActivity {
            @Override protected void onCreate(Bundle savedInstanceState) {
              super.onCreate(savedInstanceState);
              setContentView(R.layout.activity_menu);

              Button play = findViewById(R.id.btnPlay);
              Button settings = findViewById(R.id.btnSettings);
              Button exit = findViewById(R.id.btnExit);

              play.setOnClickListener(new View.OnClickListener() {
                @Override public void onClick(View v) {
                  startActivity(new Intent(MenuActivity.this, MainActivity.class));
                }
              });
              settings.setOnClickListener(new View.OnClickListener() {
                @Override public void onClick(View v) {
                  startActivity(new Intent(MenuActivity.this, SettingsActivity.class));
                }
              });
              exit.setOnClickListener(new View.OnClickListener() {
                @Override public void onClick(View v) {
                  finishAffinity();
                }
              });
            }
          }
          EOF

          cat > app/src/main/java/com/example/snake/SettingsActivity.java <<'EOF'
          package com.example.snake;

          import android.content.SharedPreferences;
          import android.os.Bundle;
          import android.widget.RadioButton;
          import android.widget.RadioGroup;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.appcompat.widget.SwitchCompat;

          public class SettingsActivity extends AppCompatActivity {
            public static final String PREFS="snake_prefs";
            public static final String KEY_WRAP="wrap";
            public static final String KEY_HAPTICS="haptics";
            public static final String KEY_SOUND="sound";
            public static final String KEY_SPEED="speed"; // 0=slow 1=normal 2=fast

            @Override protected void onCreate(Bundle savedInstanceState) {
              super.onCreate(savedInstanceState);
              setContentView(R.layout.activity_settings);

              final SharedPreferences sp=getSharedPreferences(PREFS, MODE_PRIVATE);

              SwitchCompat swWrap=findViewById(R.id.switchWrap);
              SwitchCompat swHaptics=findViewById(R.id.switchHaptics);
              SwitchCompat swSound=findViewById(R.id.switchSound);
              RadioGroup group=findViewById(R.id.groupSpeed);
              RadioButton rSlow=findViewById(R.id.radioSlow);
              RadioButton rNormal=findViewById(R.id.radioNormal);
              RadioButton rFast=findViewById(R.id.radioFast);

              swWrap.setChecked(sp.getBoolean(KEY_WRAP,false));
              swHaptics.setChecked(sp.getBoolean(KEY_HAPTICS,true));
              swSound.setChecked(sp.getBoolean(KEY_SOUND,false));

              int speed=sp.getInt(KEY_SPEED,1);
              if(speed==0) rSlow.setChecked(true);
              else if(speed==2) rFast.setChecked(true);
              else rNormal.setChecked(true);

              swWrap.setOnCheckedChangeListener((b,checked)-> sp.edit().putBoolean(KEY_WRAP,checked).apply());
              swHaptics.setOnCheckedChangeListener((b,checked)-> sp.edit().putBoolean(KEY_HAPTICS,checked).apply());
              swSound.setOnCheckedChangeListener((b,checked)-> sp.edit().putBoolean(KEY_SOUND,checked).apply());
              group.setOnCheckedChangeListener((g,id)->{
                int s= (id==R.id.radioSlow)?0 : (id==R.id.radioFast?2:1);
                sp.edit().putInt(KEY_SPEED,s).apply();
              });
            }
          }
          EOF

          cat > app/src/main/java/com/example/snake/MainActivity.java <<'EOF'
          package com.example.snake;

          import android.os.Bundle;
          import android.view.View;
          import androidx.appcompat.app.AppCompatActivity;

          public class MainActivity extends AppCompatActivity {
            private GameView gameView;
            @Override protected void onCreate(Bundle savedInstanceState) {
              super.onCreate(savedInstanceState);
              getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_FULLSCREEN |
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION |
                View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
              setContentView(R.layout.activity_main);
              gameView = findViewById(R.id.gameView);
            }
            @Override protected void onResume(){ super.onResume(); if(gameView!=null) gameView.resume(); }
            @Override protected void onPause(){ super.onPause(); if(gameView!=null) gameView.pause(); }
          }
          EOF

          cat > app/src/main/java/com/example/snake/GameView.java <<'EOF'
          package com.example.snake;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.graphics.Canvas;
          import android.graphics.Color;
          import android.graphics.Paint;
          import android.graphics.Point;
          import android.os.Build;
          import android.os.Handler;
          import android.os.Looper;
          import android.os.VibrationEffect;
          import android.os.Vibrator;
          import android.util.AttributeSet;
          import android.view.GestureDetector;
          import android.view.MotionEvent;
          import android.view.View;

          import java.util.ArrayDeque;
          import java.util.ArrayList;
          import java.util.Iterator;
          import java.util.List;
          import java.util.Random;

          public class GameView extends View {
            // Prefs
            private static final String PREFS="snake_prefs";
            private static final String KEY_BEST="best";
            private static final String KEY_WRAP="wrap";
            private static final String KEY_HAPTICS="haptics";
            private static final String KEY_SPEED="speed";

            // Board & snake
            private int cellSize, cols, rows;
            private final ArrayDeque<Point> snake = new ArrayDeque<>();
            private Direction dir = Direction.RIGHT, nextDir = Direction.RIGHT;
            private Point food = new Point(5,5); private final Random rng = new Random();

            // Timing
            private final Handler handler = new Handler(Looper.getMainLooper());
            private int baseTickMs = 110;
            private boolean running=false, started=false, gameOver=false, paused=false;

            // Score & prefs
            private int score=0, best=0;
            private boolean wrap=false, haptics=true;

            // Paints
            private final Paint snakePaint=new Paint();
            private final Paint foodPaint=new Paint();
            private final Paint gridPaint=new Paint();
            private final Paint textPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
            private final Paint ringPaint=new Paint(Paint.ANTI_ALIAS_FLAG);

            // Gestures & haptics
            private final GestureDetector gestures; private Vibrator vibrator;

            // Juice
            private long lastEatMs=0;

            // Pickups / power-ups
            private enum PU { SLOW, SHIELD, POISON }
            private static class Pickup { Point p; PU type; long expiresAt; Pickup(Point p, PU t, long e){this.p=p; this.type=t; this.expiresAt=e;} }
            private final List<Pickup> pickups = new ArrayList<>();
            private long slowUntil=0; private int shields=0;

            public GameView(Context c){ this(c,null); }
            public GameView(Context c, AttributeSet a){
              super(c,a); setFocusable(true);

              snakePaint.setColor(Color.rgb(56,142,60));
              foodPaint.setColor(Color.rgb(229,57,53));
              gridPaint.setColor(Color.argb(40,255,255,255)); gridPaint.setStrokeWidth(1f);
              textPaint.setColor(Color.WHITE); textPaint.setTextAlign(Paint.Align.LEFT);
              ringPaint.setStyle(Paint.Style.STROKE); ringPaint.setStrokeWidth(4f); ringPaint.setColor(Color.WHITE);

              gestures=new GestureDetector(c,new GestureDetector.SimpleOnGestureListener(){
                private static final int T=40; @Override public boolean onDown(MotionEvent e){return true;}
                @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float vx, float vy){
                  float dx=e2.getX()-e1.getX(), dy=e2.getY()-e1.getY();
                  if(Math.abs(dx)>Math.abs(dy)){ if(Math.abs(dx)>T){ if(dx>0) turn(Direction.RIGHT); else turn(Direction.LEFT); return true; } }
                  else { if(Math.abs(dy)>T){ if(dy>0) turn(Direction.DOWN); else turn(Direction.UP); return true; } }
                  return false;
                }
              });
              vibrator=(Vibrator)c.getSystemService(Context.VIBRATOR_SERVICE);

              SharedPreferences sp=c.getSharedPreferences(PREFS, Context.MODE_PRIVATE);
              best=sp.getInt(KEY_BEST,0);
              wrap=sp.getBoolean(KEY_WRAP,false);
              haptics=sp.getBoolean(KEY_HAPTICS,true);
              int speed=sp.getInt(KEY_SPEED,1);
              baseTickMs = (speed==0?140:(speed==2?80:110));

              reset();
            }

            private void reset(){
              snake.clear(); int sx=6,sy=6;
              snake.add(new Point(sx,sy)); snake.add(new Point(sx-1,sy)); snake.add(new Point(sx-2,sy));
              dir=Direction.RIGHT; nextDir=Direction.RIGHT; score=0; gameOver=false; started=false;
              pickups.clear(); slowUntil=0; shields=0;
              spawnFood(); invalidate();
            }

            private void spawnFood(){
              if(cols<=0||rows<=0) return;
              while(true){
                int fx=rng.nextInt(cols), fy=rng.nextInt(rows);
                if(!onSnake(fx,fy) && !pickupHere(fx,fy)){ food.set(fx,fy); return; }
              }
            }

            private boolean onSnake(int x,int y){
              for(Point p:snake){ if(p.x==x && p.y==y) return true; } return false;
            }
            private boolean pickupHere(int x,int y){
              for(Pickup k:pickups){ if(k.p.x==x && k.p.y==y) return true; } return false;
            }

            // Anonymous class avoids lambda self-reference issue
            private final Runnable tick = new Runnable() {
              @Override public void run() {
                if (running && !paused) {
                  step();
                  invalidate();
                  scheduleNext();
                }
              }
            };
            private int getTickMs(){
              long now=System.currentTimeMillis();
              return (now<slowUntil)? (int)(baseTickMs*1.8) : baseTickMs;
            }
            private void scheduleNext(){ handler.postDelayed(tick, getTickMs()); }

            public void resume(){ running=true; handler.removeCallbacks(tick); scheduleNext(); }
            public void pause(){ running=false; handler.removeCallbacks(tick); invalidate(); }

            @Override protected void onSizeChanged(int w,int h,int ow,int oh){
              super.onSizeChanged(w,h,ow,oh);
              cellSize=Math.max(24, Math.min(w,h)/20);
              cols=Math.max(10, w/cellSize); rows=Math.max(16, h/cellSize);
              textPaint.setTextSize(cellSize*0.8f);
              spawnFood();
            }

            @Override protected void onDraw(Canvas c){
              super.onDraw(c); c.drawColor(Color.rgb(33,33,33));

              // grid
              for(int x=0;x<=cols;x++){ float px=x*cellSize; c.drawLine(px,0,px,rows*cellSize,gridPaint);}
              for(int y=0;y<=rows;y++){ float py=y*cellSize; c.drawLine(0,py,cols*cellSize,py,gridPaint);}

              // food with pulse
              long now=System.currentTimeMillis();
              float pulse=(float)(1.0 + 0.05*Math.sin(now/120.0));
              float fx=food.x*cellSize+cellSize/2f, fy=food.y*cellSize+cellSize/2f;
              c.drawCircle(fx,fy,cellSize*0.35f*pulse,foodPaint);

              // pickups
              for(Pickup k:pickups){
                float cx=k.p.x*cellSize+cellSize/2f, cy=k.p.y*cellSize+cellSize/2f;
                switch(k.type){
                  case SLOW: // blue ring + hand
                    Paint p1=new Paint(Paint.ANTI_ALIAS_FLAG); p1.setStyle(Paint.Style.STROKE); p1.setStrokeWidth(4f); p1.setColor(Color.rgb(66,165,245));
                    c.drawCircle(cx,cy,cellSize*0.36f,p1);
                    c.drawLine(cx,cy, cx, cy-cellSize*0.22f, p1);
                    c.drawLine(cx,cy, cx+cellSize*0.15f, cy, p1);
                    break;
                  case SHIELD: // cyan thick ring
                    Paint p2=new Paint(Paint.ANTI_ALIAS_FLAG); p2.setStyle(Paint.Style.STROKE); p2.setStrokeWidth(6f); p2.setColor(Color.rgb(0,230,230));
                    c.drawCircle(cx,cy,cellSize*0.34f,p2);
                    break;
                  case POISON: // purple X
                    Paint p3=new Paint(Paint.ANTI_ALIAS_FLAG); p3.setStrokeWidth(6f); p3.setColor(Color.rgb(171,71,188));
                    float r=cellSize*0.28f; c.drawLine(cx-r,cy-r,cx+r,cy+r,p3); c.drawLine(cx-r,cy+r,cx+r,cy-r,p3);
                    break;
                }
              }

              // snake
              for(Point p:snake){
                float l=p.x*cellSize+2, t=p.y*cellSize+2, r=l+cellSize-4, b=t+cellSize-4;
                c.drawRoundRect(l,t,r,b,12,12,snakePaint);
              }

              // eat ring
              if(now-lastEatMs<300){
                float t=(now-lastEatMs)/300f;
                float rr= cellSize*(0.4f+0.6f*t);
                ringPaint.setAlpha((int)((1f-t)*255));
                c.drawCircle(fx,fy,rr,ringPaint);
              }

              // HUD
              String hud=getContext().getString(R.string.score)+": "+score+"   "+getContext().getString(R.string.best)+": "+best;
              textPaint.setTextAlign(Paint.Align.LEFT);
              c.drawText(hud,16, textPaint.getTextSize()+16, textPaint);

              // active effects (top-right)
              textPaint.setTextAlign(Paint.Align.RIGHT);
              int y0=(int)(textPaint.getTextSize()+16);
              if(now<slowUntil){ c.drawText(getContext().getString(R.string.slow_active), getWidth()-16, y0, textPaint); y0+=textPaint.getTextSize()+6; }
              if(shields>0){ c.drawText(getContext().getString(R.string.shield_active)+" x"+shields, getWidth()-16, y0, textPaint); }

              // overlays
              textPaint.setTextAlign(Paint.Align.CENTER);
              if(!started) c.drawText(getContext().getString(R.string.tap_to_start), getWidth()/2f, getHeight()/2f - textPaint.getTextSize(), textPaint);
              else if(paused) c.drawText(getContext().getString(R.string.paused), getWidth()/2f, getHeight()/2f - textPaint.getTextSize(), textPaint);
              else if(gameOver){
                c.drawText(getContext().getString(R.string.game_over), getWidth()/2f, getHeight()/2f - textPaint.getTextSize(), textPaint);
                c.drawText(getContext().getString(R.string.tap_to_start), getWidth()/2f, getHeight()/2f + textPaint.getTextSize()*0.3f, textPaint);
              }
            }

            private void maybeSpawnPickup(){
              if(cols<=0||rows<=0) return;
              long now=System.currentTimeMillis();

              // expire old
              for(Iterator<Pickup> it=pickups.iterator(); it.hasNext();){
                if(it.next().expiresAt < now) it.remove();
              }

              if(pickups.size()>=2) return;
              if(rng.nextInt(18)!=0) return; // ~5-6% per step

              // choose type (weights: slow 50%, shield 30%, poison 20%)
              int r=rng.nextInt(10);
              PU type = (r<5)?PU.SLOW : (r<8?PU.SHIELD:PU.POISON);

              int tries=0;
              while(tries++<50){
                int x=rng.nextInt(cols), y=rng.nextInt(rows);
                if(!onSnake(x,y) && (x!=food.x || y!=food.y) && !pickupHere(x,y)){
                  pickups.add(new Pickup(new Point(x,y), type, now+10000)); // 10s life
                  return;
                }
              }
            }

            private void step(){
              if(gameOver||paused) return;
              dir=nextDir; Point h=snake.peekFirst(); int nx=h.x, ny=h.y;

              switch(dir){ case UP:ny--;break; case DOWN:ny++;break; case LEFT:nx--;break; case RIGHT:nx++;break; }

              if(wrap){
                if(nx<0) nx=cols-1; else if(nx>=cols) nx=0;
                if(ny<0) ny=rows-1; else if(ny>=rows) ny=0;
              } else {
                if(nx<0||nx>=cols||ny<0||ny>=rows){ onDie(); return; }
              }

              for(Point p:snake){ if(p.x==nx&&p.y==ny){ onDie(); return; } }

              snake.addFirst(new Point(nx,ny));

              if(nx==food.x&&ny==food.y){
                score++;
                if(score>best){
                  best=score;
                  getContext().getSharedPreferences(PREFS, Context.MODE_PRIVATE).edit().putInt(KEY_BEST,best).apply();
                }
                vibrate(20); lastEatMs=System.currentTimeMillis();
                spawnFood();
                maybeSpawnPickup();
              } else {
                snake.removeLast();
                maybeSpawnPickup();
              }

              // pickup collision
              for(Iterator<Pickup> it=pickups.iterator(); it.hasNext();){
                Pickup k=it.next();
                if(k.p.x==nx && k.p.y==ny){
                  applyPickup(k.type);
                  it.remove();
                }
              }
            }

            private void applyPickup(PU type){
              switch(type){
                case SLOW:
                  slowUntil = System.currentTimeMillis()+7000;
                  vibrate(10);
                  break;
                case SHIELD:
                  shields = Math.min(3, shields+1);
                  vibrate(15);
                  break;
                case POISON:
                  if(shields>0){ shields--; vibrate(10); }
                  else { score = Math.max(0, score-1); vibrate(40); }
                  break;
              }
            }

            private void onDie(){ 
              if(shields>0){ shields--; vibrate(20); return; }
              gameOver=true; started=false; vibrate(60); pause(); 
            }

            private void vibrate(int ms){
              if(!haptics) return;
              if(vibrator==null) return;
              try{
                if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.O)
                  vibrator.vibrate(VibrationEffect.createOneShot(ms, VibrationEffect.DEFAULT_AMPLITUDE));
                else vibrator.vibrate(ms);
              }catch(Exception ignored){}
            }

            private void turn(Direction d){ if(dir.isOpposite(d)) return; nextDir=d; if(!started&&!gameOver){ started=true; resume(); } }

            @Override public boolean onTouchEvent(MotionEvent e){
              if(gestures.onTouchEvent(e)) return true;
              if(e.getAction()==MotionEvent.ACTION_UP){
                if(gameOver){ reset(); resume(); }
                else if(!started){ started=true; resume(); }
                else { paused=!paused; if(!paused&&running){ handler.removeCallbacks(tick); scheduleNext(); } invalidate(); }
                return true;
              }
              return true;
            }

            enum Direction{ UP,DOWN,LEFT,RIGHT; boolean isOpposite(Direction o){
              return (this==UP&&o==DOWN)||(this==DOWN&&o==UP)||(this==LEFT&&o==RIGHT)||(this==RIGHT&&o==LEFT);
            }}
          }
          EOF

      - name: Download Gradle and generate wrapper
        run: |
          curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
          unzip -q gradle.zip
          ./gradle-8.7/bin/gradle -q wrapper --gradle-version 8.7
          ./gradlew --version

      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: snake-v1.1-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error